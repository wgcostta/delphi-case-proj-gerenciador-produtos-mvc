unit DM_PRODUTOS;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Data.DB, Data.SqlExpr,
  DM_CONEXAO,
  Datasnap.DBClient, Datasnap.Provider, uProdutoModel;

type
  TDM_PRODUTO = class(TDataModule)
    sqlPesquisar: TSQLDataSet;
    dspPesquisar: TDataSetProvider;
    cdsPesquisar: TClientDataSet;
    cdsPesquisarCODIGO: TIntegerField;
    cdsPesquisarDESCRICAO: TStringField;
    cdsPesquisarCODIGO_CATEGORIA: TIntegerField;
    cdsPesquisarPRECO: TSingleField;
    cdsPesquisarDATA_CADASTRO: TSingleField;
    cdsPesquisarDATA_ATUALIZACAO: TDateField;
    cdsPesquisarSITUACAO: TStringField;
    SQL_AUMENTAR_MARGEM: TSQLDataSet;
    SQL_DIMINUIR_MARGEM: TSQLDataSet;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure Pesquisar(sNome: String);
    procedure CarregarProduto(oProduto: TProduto; iCodigo: Integer);
    // usando function para vermos se foi inserido ou não
    function AumentarMargem(oProduto: TProduto; out sErro: String): Boolean;
    function DiminuirMargem(oProduto: TProduto; out sErro: String): Boolean;

  end;

var
  DM_PRODUTO: TDM_PRODUTO;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}
{ TDM_PRODUTO }

function TDM_PRODUTO.AumentarMargem(oProduto: TProduto;
  out sErro: String): Boolean;
begin

  begin

    SQL_AUMENTAR_MARGEM.Params[0].AsString := oProduto.Preco;
    SQL_AUMENTAR_MARGEM.Params[1].AsInteger := oProduto.CodigoCategoria;

    try
      SQL_AUMENTAR_MARGEM.ExecSQL();
      Result := True;

    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao atualizar o cliente:' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;

  end;
end;

function TDM_PRODUTO.DiminuirMargem(oProduto: TProduto;
  out sErro: String): Boolean;
begin

  begin

    SQL_DIMINUIR_MARGEM.Params[0].AsString := oProduto.Preco;
    SQL_DIMINUIR_MARGEM.Params[1].AsInteger := oProduto.CodigoCategoria;

    try
      SQL_DIMINUIR_MARGEM.ExecSQL();
      Result := True;

    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao atualizar o cliente:' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;

  end;
end;

procedure TDM_PRODUTO.CarregarProduto(oProduto: TProduto; iCodigo: Integer);
var
  sqlProduto: TSQLDataSet;
begin
  sqlProduto := TSQLDataSet.Create(nil);
  try
    with sqlProduto do
    begin
      SQLConnection := dmConexao.sqlConexao;
      CommandText := 'select * from produto where (codigo=' +
        IntToStr(iCodigo) + ')';
      Open;
      with oProduto do
      begin
        Codigo := FieldByName('CODIGO').AsInteger;
        Descricao := FieldByName('DESCRICAO').AsString;
        Situacao := FieldByName('SITUACAO').AsString;
        CodigoCategoria := FieldByName('CODIGO_CATEGORIA').AsInteger;
        Preco := FieldByName('PRECO').AsString;
        UltimoPreco := FieldByName('ULTIMO_PRECO').AsCurrency;
        DataCadastro := FieldByName('DATA_CADASTRO').AsString;
        DataAtualizacao := FieldByName('DATA_ATUALIZACAO').AsString;

      end;
    end;

  finally
    FreeAndNil(sqlProduto);
  end;
end;

procedure TDM_PRODUTO.Pesquisar(sNome: String);
begin
  // if cdsPesquisar.Active then
  cdsPesquisar.DisableControls;
  cdsPesquisar.Close;
  // cdsPesquisar.Params[0]     indice do parametro zero, ou por nome:
  cdsPesquisar.ParamByName('DESCRICAO').AsString := '%' + sNome + '%';
  cdsPesquisar.Open;
  cdsPesquisar.First;
  cdsPesquisar.EnableControls;
end;

end.
