unit DM_CATEGORIAS;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Data.DB, Datasnap.DBClient,
  Datasnap.Provider, Data.SqlExpr, DM_CONEXAO, uCategoriaModel;

type
  TDM_CATEGORIA = class(TDataModule)
    sqlPesquisar: TSQLDataSet;
    sqlInserir: TSQLDataSet;
    sqlAlterar: TSQLDataSet;
    sqlExcluir: TSQLDataSet;
    dspPesquisar: TDataSetProvider;
    cdsPesquisar: TClientDataSet;
    cdsPesquisarCODIGO: TIntegerField;
    cdsPesquisarDESCRICAO: TStringField;
    cdsPesquisarCODIGO_CATEGORIA: TIntegerField;
    cdsPesquisarPRECO: TSingleField;
    cdsPesquisarDATA_CADASTRO: TSingleField;
    cdsPesquisarDATA_ATUALIZACAO: TDateField;
    cdsPesquisarSITUACAO: TStringField;
    sqlPesquisarCODIGO: TIntegerField;
    sqlPesquisarDESCRICAO: TStringField;
    CDS_CATEGORIAS: TClientDataSet;
    DSP_CATEGORIAS: TDataSetProvider;
    SQL_CATEGORIAS: TSQLDataSet;
    SQL_CATEGORIASCODIGO: TIntegerField;
    SQL_CATEGORIASDESCRICAO: TStringField;
    CDS_CATEGORIASCODIGO: TIntegerField;
    CDS_CATEGORIASDESCRICAO: TStringField;
    SQL_GERAL: TSQLDataSet;
    DSP_GERAL: TDataSetProvider;
    CDS_GERAL: TClientDataSet;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure Pesquisar(sNome: String);
    procedure CarregarCategoria(oCategoria: TCategoria; iCodigo: Integer);

    function Inserir(oCategoria: TCategoria; out sErro: String): Boolean;
    function Alterar(oCategoria: TCategoria; out sErro: String): Boolean;
    function Excluir(iCodigo: Integer; out sErro: String): Boolean;

  end;

var
  DM_CATEGORIA: TDM_CATEGORIA;

implementation

var   sSQLGeral :  String;

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}
{ TDM_CATEGORIA }

function TDM_CATEGORIA.Alterar(sSQLGeral: String;
  out sErro: String): Boolean;
begin
  DM_CATEGORIA.SQL_GERAL.CommandText := sSQLGeral;
  try
      DM_CATEGORIA.SQL_CATEGORIAS.ExecSQL();
      Result := True;

      except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao atualizar o Produto:' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;


end;

procedure TDM_CATEGORIA.CarregarCategoria(oCategoria: TCategoria;
  iCodigo: Integer);
var
  sqlCategoria: TSQLDataSet;
begin
  sqlCategoria := TSQLDataSet.Create(nil);
  try
    with sqlCategoria do
    begin
      SQLConnection := dmConexao.sqlConexao;
      CommandText := 'select * from Categoria where (codigo=' +
        IntToStr(iCodigo) + ')';
      Open;
      with oCategoria do
      begin
        Codigo := FieldByName('CODIGO').AsInteger;
        Descricao := FieldByName('DESCRICAO').AsString;

      end;
    end;

  finally
    FreeAndNil(sqlCategoria);
  end;
end;

function TDM_CATEGORIA.Excluir(iCodigo: Integer; out sErro: String): Boolean;
begin
  with sqlExcluir do
  begin
    Params[0].AsInteger := iCodigo;
    try
      ExecSQL();
      Result := True;

    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao excluir a Categoria: ' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;
  end;
end;

function TDM_CATEGORIA.Inserir(oCategoria: TCategoria;
  out sErro: String): Boolean;
begin
  with sqlInserir, oCategoria do
  begin
    Params[0].AsString := Descricao;
    // Params[1].AsInteger := Codigo;
    try
      ExecSQL();
      Result := True;

    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao inserir o Categoria: ' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;

  end;
end;

procedure TDM_CATEGORIA.Pesquisar(sNome: String);
begin
  if cdsPesquisar.Active then
    cdsPesquisar.Close;
  // cdsPesquisar.Params[0]     indice do parametro zero, ou por nome:
  cdsPesquisar.ParamByName('DESCRICAO').AsString := '%' + sNome + '%';
  cdsPesquisar.Open;
  cdsPesquisar.First;

end;

end.
